Scheme Program {
    // @ = (ArrA*MatSize*MatSize).PrintMatrix;
    // b = (ArrB*1*MatSize).PrintMatrix;
    @ = ((ArrA*ArrB*MatSize*Iterations*BlockSize).SteepestDescent).print;
    Iterations = [4].toInt;

	BlockSize = [3].toInt;
	// R1 = (ArrA*MatSize*1).GetRow;
	// R0 = (ArrA*MatSize*0).GetRow;
	MatSize = ([1]).GetMatSize;

	ArrAWiSize = ([1]*MatSize*MatSize).ReadMatrix;
	ArrBWiSize = ([2]*MatSize*1).ReadMatrix;

	ArrA = (ArrAWiSize*1).ShiftArray;
    ArrB = (ArrBWiSize*1).ShiftArray;

    Fun SteepestDescent {
        MatA = [1];
        MatB = [2];
		MatSize = [3];
		Iterations = [4];
		BlockSize = [5];

        x = MatB;
        r = MatB;

        @ = (MatA*MatB*x*r*MatSize*0*Iterations*BlockSize).EvalRecursion;

        Fun EvalRecursion {
            MatA = [1];
            MatB = [2];
            x = [3];
            r = [4];
            MatSize = [5];
            CurIter = [6];
            MaxIters = [7];
            BlockSize = [8];

            Alpha = (ScalarAlpha1*ScalarAlpha2).div;
            ScalarAlpha1 = (r*r*BlockSize).EvalScalarProduct;
            ScalarAlpha2 = (r*MatrixVectProduct*BlockSize).EvalScalarProduct;
            MatrixVectProduct = (MatA*r*BlockSize).EvalMatrixVectorProduct;

            NewR = (MatA*MatB*x*BlockSize*MatSize).GradF;
            NewX = (x*NewR*Alpha*MatSize).EvalX;

            residual = (ScalarProd).sqrt;
            ScalarProd = (r*r*BlockSize).EvalScalarProduct;

            NextIter = (CurIter*1).add;

            @ = (NextIter*MaxIters).gequal -> NewX*residual,
                (MatA*MatB*NewX*NewR*MatSize*NextIter*MaxIters*BlockSize).EvalRecursion;

            Fun EvalScalarProduct {
                Vect1 = [1];
                Vect2 = [2];
                BlockSize = [3];

                @ = (product);
                VectLen = (Vect1).arrayLen;
                TotalBlocks1 = (VectLen*BlockSize).div;
                TotalBlocks2 = (TotalBlocks1*1).add;
                TotalBlocks = (TotalBlocks1).toInt;
                product = (Vect1*Vect2*BlockSize*0*TotalBlocks).EvalScalarBlock;

                Fun EvalScalarBlock {
                    Vect1 = [1];
                    Vect2 = [2];
                    BlockSize = [3];
                    CurBlock = [4];
                    TotalBlocks = [5];


                    MatSize = (Vect1).arrayLen;
                    CurId = (CurBlock*BlockSize).mul;
                    StopIdTry = (CurId*BlockSize).add;
                    StopId = (StopIdTry*MatSize).gequal -> (MatSize*1).sub,
                        StopIdTry;

                    product = (Vect1*Vect2*CurId*StopId).MultAndSumBlocks;
                    NextBlock = (CurBlock*1).add;

                    @ = (NextBlock*TotalBlocks).equal -> product,
                        (product*((Vect1*Vect2*BlockSize*NextBlock*TotalBlocks).EvalScalarBlock)).add;

                    Fun MultAndSumBlocks {
                        Vect1 = [1];
                        Vect2 = [2];
                        CurId = [3];
                        StopId = [4];

                        x = (Vect1*CurId).arrayGet;
                        y = (Vect2*CurId).arrayGet;
                        res = (x*y).mul;

                        NextId = (CurId*1).add;
                        @ = (NextId*StopId).gequal -> res,
                            (res*((Vect1*Vect2*NextId*StopId).MultAndSumBlocks)).add;
                    }
                }
            }

            Fun EvalMatrixVectorProduct {
                MatA = [1];
                VectB = [2];
                BlockSize = [3];

                @ = (product);
                MatSize = (VectB).arrayLen;
                TotalBlocks1 = (MatSize*BlockSize).div;
                TotalBlocks2 = (TotalBlocks1*1).add;
                TotalBlocks = (TotalBlocks1).toInt;

                res = (MatSize*0.0).arrayCreate;

                product = (MatA*VectB*BlockSize*TotalBlocks*0*MatSize*res).EvalMatVectLoop;

                Fun EvalMatVectLoop {
                    MatA = [1];
                    VectB = [2];
                    BlockSize = [3];
                    TotalBlocks = [4];
                    CurI = [5];
                    MatSize = [6];
                    res = [7];

                    NewRes = (MatA*VectB*BlockSize*TotalBlocks*CurI*MatSize*res).EvalCurrentRow;
                    NextI = (CurI*1).add;

                    @ = (NextI*MatSize).gequal -> NewRes,
                        (MatA*VectB*BlockSize*TotalBlocks*NextI*MatSize*NewRes).EvalMatVectLoop;

                    Fun EvalCurrentRow {
                        MatA = [1];
                        VectB = [2];
                        BlockSize = [3];
                        TotalBlocks = [4];
                        CurI = [5];
                        MatSize = [6];
                        res = [7];

                        CurRow = (MatA*MatSize*CurI).GetRow;
                        product = (CurRow*VectB*BlockSize*0*TotalBlocks).EvalScalarBlock;
                        @ = (res*CurI*product).arraySet;
                        // @ = MatSize.print;

                        Fun GetRow
                        {
                            Matrix = [1];
                            Cols = [2].toInt;
                            RowIndex = [3].toInt;
                            MatIndexStart = (RowIndex*Cols).mul;
                            MatIndexEnd =  (MatIndexStart*Cols).add;

                            Row = (Cols*0.0).arrayCreate;

                            @ = (Matrix*MatIndexStart*MatIndexEnd*Row*MatIndexStart).CopyRow;
                            CopyRow = ([2]*[3]).equal -> [4], ([1]*(([2]*1).add)*[3]*([4]*([2]*[5]).sub*([1]*[2]).arrayGet).arraySet*[5]).CopyRow;
                        }

                        Fun EvalScalarBlock {
                            Vect1 = [1];
                            Vect2 = [2];
                            BlockSize = [3];
                            CurBlock = [4];
                            TotalBlocks = [5];


                            MatSize = (Vect1).arrayLen;
                            CurId = (CurBlock*BlockSize).mul;
                            StopIdTry = (CurId*BlockSize).add;
                            StopId = (StopIdTry*MatSize).gequal -> (MatSize*1).sub,
                                StopIdTry;

                            product = (Vect1*Vect2*CurId*StopId).MultAndSumBlocks;
                            NextBlock = (CurBlock*1).add;

                            @ = (NextBlock*TotalBlocks).equal -> product,
                                (product*((Vect1*Vect2*BlockSize*NextBlock*TotalBlocks).EvalScalarBlock)).add;

                            Fun MultAndSumBlocks {
                                Vect1 = [1];
                                Vect2 = [2];
                                CurId = [3];
                                StopId = [4];

                                x = (Vect1*CurId).arrayGet;
                                y = (Vect2*CurId).arrayGet;
                                res = (x*y).mul;

                                NextId = (CurId*1).add;
                                @ = (NextId*StopId).gequal -> res,
                                    (res*((Vect1*Vect2*NextId*StopId).MultAndSumBlocks)).add;
                            }
                        }
                    }
                }
            }

            Fun GradF {
                MatA = [1];
                VectB = [2];
                VectX = [3];
                BlockSize = [4];
                MatSize = [5];

                y = (MatA*VectX*BlockSize).EvalMatrixVectorProduct;
                res = (y*VectB*MatSize*0).ArrSubArr;
                @ = res;
                Fun ArrSubArr {
                    VectA = [1];
                    VectB = [2];
                    MatSize = [3];
                    CurId = [4];

                    res = ((VectA*CurId).arrayGet*(VectB*CurId).arrayGet).sub;
                    NewVectA = (VectA*CurId*res).arraySet;
                    NextId = (CurId*1).add;

                    @ = (NextId*MatSize).gequal -> NewVectA,
                        (NewVectA*VectB*MatSize*NextId).ArrSubArr;
                }


                Fun EvalMatrixVectorProduct {
                    MatA = [1];
                    VectB = [2];
                    BlockSize = [3];

                    @ = (product);
                    MatSize = (VectB).arrayLen;
                    TotalBlocks1 = (MatSize*BlockSize).div;
                    TotalBlocks2 = (TotalBlocks1*1).add;
                    TotalBlocks = (TotalBlocks1).toInt;

                    res = (MatSize*0.0).arrayCreate;

                    product = (MatA*VectB*BlockSize*TotalBlocks*0*MatSize*res).EvalMatVectLoop;

                    Fun EvalMatVectLoop {
                        MatA = [1];
                        VectB = [2];
                        BlockSize = [3];
                        TotalBlocks = [4];
                        CurI = [5];
                        MatSize = [6];
                        res = [7];

                        NewRes = (MatA*VectB*BlockSize*TotalBlocks*CurI*MatSize*res).EvalCurrentRow;
                        NextI = (CurI*1).add;

                        @ = (NextI*MatSize).gequal -> NewRes,
                            (MatA*VectB*BlockSize*TotalBlocks*NextI*MatSize*NewRes).EvalMatVectLoop;

                        Fun EvalCurrentRow {
                            MatA = [1];
                            VectB = [2];
                            BlockSize = [3];
                            TotalBlocks = [4];
                            CurI = [5];
                            MatSize = [6];
                            res = [7];

                            CurRow = (MatA*MatSize*CurI).GetRow;
                            product = (CurRow*VectB*BlockSize*0*TotalBlocks).EvalScalarBlock;
                            @ = (res*CurI*product).arraySet;
                            // @ = MatSize.print;

                            Fun GetRow
                            {
                                Matrix = [1];
                                Cols = [2].toInt;
                                RowIndex = [3].toInt;
                                MatIndexStart = (RowIndex*Cols).mul;
                                MatIndexEnd =  (MatIndexStart*Cols).add;

                                Row = (Cols*0.0).arrayCreate;

                                @ = (Matrix*MatIndexStart*MatIndexEnd*Row*MatIndexStart).CopyRow;
                                CopyRow = ([2]*[3]).equal -> [4], ([1]*(([2]*1).add)*[3]*([4]*([2]*[5]).sub*([1]*[2]).arrayGet).arraySet*[5]).CopyRow;
                            }

                            Fun EvalScalarBlock {
                                Vect1 = [1];
                                Vect2 = [2];
                                BlockSize = [3];
                                CurBlock = [4];
                                TotalBlocks = [5];


                                MatSize = (Vect1).arrayLen;
                                CurId = (CurBlock*BlockSize).mul;
                                StopIdTry = (CurId*BlockSize).add;
                                StopId = (StopIdTry*MatSize).gequal -> (MatSize*1).sub,
                                    StopIdTry;

                                product = (Vect1*Vect2*CurId*StopId).MultAndSumBlocks;
                                NextBlock = (CurBlock*1).add;

                                @ = (NextBlock*TotalBlocks).equal -> product,
                                    (product*((Vect1*Vect2*BlockSize*NextBlock*TotalBlocks).EvalScalarBlock)).add;

                                Fun MultAndSumBlocks {
                                    Vect1 = [1];
                                    Vect2 = [2];
                                    CurId = [3];
                                    StopId = [4];

                                    x = (Vect1*CurId).arrayGet;
                                    y = (Vect2*CurId).arrayGet;
                                    res = (x*y).mul;

                                    NextId = (CurId*1).add;
                                    @ = (NextId*StopId).gequal -> res,
                                        (res*((Vect1*Vect2*NextId*StopId).MultAndSumBlocks)).add;
                                }
                            }
                        }
                        
                    }


                }
            }

            Fun EvalX {
                VectX = [1];
                VectR = [2];
                Alpha = [3];
                MatSize = [4];

                @ = (VectX*VectR*Alpha*MatSize*0).ArrAddArr;

                Fun ArrAddArr {
                    VectA = [1];
                    VectB = [2];
                    Alpha = [3];
                    MatSize = [4];
                    CurId = [5];

                    AlphaVectB = ((VectB*CurId).arrayGet*Alpha).mul;
                    res = ((VectA*CurId).arrayGet*AlphaVectB).add;
                    NewVectA = (VectA*CurId*res).arraySet;
                    NextId = (CurId*1).add;

                    @ = (NextId*MatSize).gequal -> NewVectA,
                        (NewVectA*VectB*Alpha*MatSize*NextId).ArrAddArr;
                }
            }
        }

        

        // Fun EvalMatrixVectorProduct {

        // }

        // Fun GradF {

        // }

        // Fun EvalX {

        // }
    }
    
    Fun GetMatSize
	{
		@ = (([1]*(1*0.0).arrayCreate).openFile * 0).arrayGet.toInt;
	}
    
    Fun ReadMatrix
	{
		@ = ([1]*((([2]*[3]).mul*1).add*0.0).arrayCreate).openFile;
	}

    Fun GetRow
	{
		Matrix = [1];
		Cols = [2].toInt;
		RowIndex = [3].toInt;
		MatIndexStart = (RowIndex*Cols).mul;
		MatIndexEnd =  (MatIndexStart*Cols).add;

		Row = (Cols*0.0).arrayCreate;

		@ = (Matrix*MatIndexStart*MatIndexEnd*Row*MatIndexStart).CopyRow;
		CopyRow = ([2]*[3]).equal -> [4], ([1]*(([2]*1).add)*[3]*([4]*([2]*[5]).sub*([1]*[2]).arrayGet).arraySet*[5]).CopyRow;
	}

	Fun PrintMatrix
	{
		Matrix = [1];
		Rows = [2];
		Cols = [3];

		@ = (Matrix*Rows*Cols*0).Recurse;
		Recurse = ([4]*[2]).less -> ([1]*[3]*[4]).GetRow.print*"\n".print*([1]*[2]*[3]*([4]*1).add).Recurse;
	}

    Fun ShiftArray
	{
		Arr = [1];
		NShift = [2];
		Size = (([1]).arrayLen*NShift).sub;
		Narr = (Size*0.0).arrayCreate;
		@ = (Arr*Narr*Size*NShift*NShift).Shift;

		Shift = ([4]*[3]).lequal -> ([1]*([2]*([4]*[5]).sub*([1]*[4]).arrayGet).arraySet*[3]*([4]*1).add*[5]).Shift,[2];
	}
}

Application
%Program("A.txt", "B.txt", 1, 100)